package gui;

import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;

import java.util.HashMap;
import java.util.Map;

public class CheckoutScreen {

    private final ObservableList<String> cartItems = FXCollections.observableArrayList();
    private final Map<String, Integer> itemCounts = new HashMap<>();
    private final DoubleProperty total = new SimpleDoubleProperty(0.0);

    public void show() {
        Stage primaryStage = new Stage();
        primaryStage.setTitle("Checkout");

        VBox root = new VBox(10);
        root.setPadding(new Insets(20));

        Label title = new Label("Menu");
        title.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");

        HBox buttonBox = new HBox(10);
        Button teaButton = new Button("Tea");
        Button coffeeButton = new Button("Coffee");
        Button knafahButton = new Button("Knafah");

        teaButton.setPrefWidth(100);
        coffeeButton.setPrefWidth(100);
        knafahButton.setPrefWidth(100);

        buttonBox.getChildren().addAll(teaButton, coffeeButton, knafahButton);

        ListView<String> cartListView = new ListView<>(cartItems);
        cartListView.setPrefHeight(200);

        Label totalLabel = new Label("Total: $0.00");
        totalLabel.setStyle("-fx-font-size: 16px;");

        total.addListener((obs, oldVal, newVal) ->
                totalLabel.setText(String.format("Total: $%.2f", newVal.doubleValue()))
        );

        Button checkoutButton = new Button("Checkout");
        checkoutButton.setPrefWidth(120);
        checkoutButton.setOnAction(e -> {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Order Complete");
            alert.setHeaderText(null);
            alert.setContentText("Thank you for your purchase!\nYour total was $" +
                    String.format("%.2f", total.get()));
            alert.showAndWait();

            // Reset cart
            cartItems.clear();
            itemCounts.clear();
            total.set(0);
        });

        teaButton.setOnAction(e -> addItem("Tea", 3.0));
        coffeeButton.setOnAction(e -> addItem("Coffee", 5.0));
        knafahButton.setOnAction(e -> addItem("Knafah", 7.0));

        root.getChildren().addAll(title, buttonBox, new Label("Cart:"), cartListView, totalLabel, checkoutButton);

        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void addItem(String itemName, double price) {
        itemCounts.put(itemName, itemCounts.getOrDefault(itemName, 0) + 1);
        updateCartDisplay();
        total.set(total.get() + price);
    }

    private void updateCartDisplay() {
        cartItems.clear();
        for (Map.Entry<String, Integer> entry : itemCounts.entrySet()) {
            cartItems.add(entry.getKey() + " x" + entry.getValue());
        }
    }
}
